// Zero 语言类型系统示例

// 基本类型注解
let x: int = 42;
let y: float = 3.14;
let name: string = "Zero";
let flag: bool = true;

print("Basic types:");
print(x);
print(y);
print(name);
print(flag);

// 类型推导
let auto_int = 100;
let auto_float = 2.718;
let auto_string = "hello";
let auto_bool = false;

print("\nType inference:");
print(auto_int);
print(auto_float);
print(auto_string);
print(auto_bool);

// 带类型注解的函数
fn add(a: int, b: int) {
    return a + b;
}

fn multiply(x: float, y: float) {
    return x * y;
}

fn greet(name: string) {
    return "Hello, " + name;
}

print("\nTyped functions:");
let sum = add(10, 20);
print(sum);

let product = multiply(2.5, 4.0);
print(product);

let greeting = greet("World");
print(greeting);

// 混合类型注解（部分参数有类型）
fn calculate(a: int, b) {
    return a + b;
}

print("\nMixed annotations:");
let result = calculate(5, 10);
print(result);

// 算术运算的类型提升
fn type_promotion() {
    let i: int = 10;
    let f: float = 3.14;
    let result = i + f;  // int + float -> float
    return result;
}

print("\nType promotion:");
let promoted = type_promotion();
print(promoted);

// 条件表达式必须是布尔类型
let condition: bool = true;
if condition {
    print("\nConditional works!");
}

// 比较运算返回布尔值
let is_greater = 10 > 5;
print("\nComparison result:");
print(is_greater);

// 逻辑运算
let and_result = true && false;
let or_result = true || false;
print("\nLogical operations:");
print(and_result);
print(or_result);